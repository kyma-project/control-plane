{{ if .Values.runtimeReconciler.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: runtime-reconciler
  namespace: kcp-system
  labels:
    app: runtime-reconciler
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  replicas: 1
  selector:
    matchLabels:
      app: runtime-reconciler
  template:
    metadata:
      labels:
        app: runtime-reconciler
    spec:
      serviceAccountName: {{ .Values.global.kyma_environment_broker.serviceAccountName }}
      {{- with .Values.deployment.securityContext }}
      securityContext:
        {{ toYaml . | nindent 12 }}
      {{- end }}
      containers:
        - name: runtime-reconciler
          image: "{{ .Values.global.images.container_registry.path }}/{{ .Values.global.images.kyma_environment_broker.dir }}kyma-environment-runtime-reconciler:{{ .Values.global.images.kyma_environment_runtime_reconciler.version }}"
          imagePullPolicy: Always
          ports:
          - containerPort: 80
          env:
            - name: RUNTIME_RECONCILER_DRY_RUN
              value: "{{ .Values.runtimeReconciler.dryRun }}"
            - name: RUNTIME_RECONCILER_JOB_ENABLED
              value: "{{ .Values.runtimeReconciler.jobEnabled }}"
            - name: RUNTIME_RECONCILER_JOB_INTERVAL
              value: "{{ .Values.runtimeReconciler.jobInterval }}"
            - name: RUNTIME_RECONCILER_JOB_RECONCILIATION_DELAY
              value: "{{ .Values.runtimeReconciler.jobReconciliationDelay }}"
            - name: RUNTIME_RECONCILER_WATCHER_ENABLED
              value: "{{ .Values.runtimeReconciler.watcherEnabled }}"
            - name: RUNTIME_RECONCILER_BTP_MANAGER_SECRET_WATCHER_ADDR
              value: "{{ .Values.runtimeReconciler.watcherAddress }}"
            - name: RUNTIME_RECONCILER_BTP_MANAGER_SECRET_WATCHER_COMPONENT_NAME
              value: "{{ .Values.runtimeReconciler.watcherName }}"
            - name: RUNTIME_RECONCILER_DATABASE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: kcp-storage-client-secret
                  key: secretKey
                  optional: true
            - name: RUNTIME_RECONCILER_DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: kcp-postgresql
                  key: postgresql-broker-username
            - name: RUNTIME_RECONCILER_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kcp-postgresql
                  key: postgresql-broker-password
            - name: RUNTIME_RECONCILER_DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: kcp-postgresql
                  key: postgresql-serviceName
            - name: RUNTIME_RECONCILER_DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: kcp-postgresql
                  key: postgresql-servicePort
            - name: RUNTIME_RECONCILER_DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: kcp-postgresql
                  key: postgresql-broker-db-name
            - name: RUNTIME_RECONCILER_DATABASE_SSLMODE
              valueFrom:
                secretKeyRef:
                  name: kcp-postgresql
                  key: postgresql-sslMode
            - name: RUNTIME_RECONCILER_DATABASE_SSLROOTCERT
              value: /secrets/cloudsql-sslrootcert/server-ca.pem
            - name: RUNTIME_RECONCILER_PROVISIONER_URL
              value: {{ .Values.provisioner.URL }}
        {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled false)}}
          volumeMounts:
              - name: cloudsql-sslrootcert
                mountPath: /secrets/cloudsql-sslrootcert
                readOnly: true
        {{- end}}
        {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled true)}}
        - name: cloudsql-proxy
          image: {{ .Values.global.images.cloudsql_proxy_image }}
          {{- if .Values.global.database.cloudsqlproxy.workloadIdentity.enabled }}
          command: ["/cloud_sql_proxy",
                    "-instances={{ .Values.global.database.managedGCP.instanceConnectionName }}=tcp:5432"]
          {{- else }}
          command: ["/cloud_sql_proxy",
                    "-instances={{ .Values.global.database.managedGCP.instanceConnectionName }}=tcp:5432",
                    "-credential_file=/secrets/cloudsql-instance-credentials/credentials.json"]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql-instance-credentials
              readOnly: true
          {{- end }}
          {{- with .Values.deployment.securityContext }}
          securityContext:
            {{ toYaml . | nindent 16 }}
          {{- end }}
        {{- end}}
      {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled true) (eq .Values.global.database.cloudsqlproxy.workloadIdentity.enabled false)}}
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
      {{- end}}
      {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled false)}}
      volumes:
        - name: cloudsql-sslrootcert
          secret:
            secretName: kcp-postgresql
            items: 
              - key: postgresql-sslRootCert
                path: server-ca.pem
            optional: true
      {{- end}}
{{ end }}