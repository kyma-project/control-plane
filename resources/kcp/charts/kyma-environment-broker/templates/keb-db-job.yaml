{{- range $index, $property := .Values.cronJobs }}
{{- $job := get $.Values $property }}

apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ $job.name }}
spec:
  schedule: {{ $job.schedule }}
  failedJobsHistoryLimit: 5
  successfulJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        cronjob: {{ $job.cronJobName }}
    spec:
      template:
        metadata:
          name: {{ $job.imageName }}
          labels:
            cronjob: {{ $job.cronJobName }}
        spec:
          shareProcessNamespace: true
          {{- if $job.account }}
          serviceAccountName: {{ $job.account }}
          {{- end }}
          {{- with $.Values.deployment.securityContext }}
          securityContext:
            {{ toYaml . }}
          {{- end }}
          restartPolicy: Never
          containers:
          - name: {{ $job.cronJobName }}
            image: "{{ $.Values.global.images.containerRegistry.path }}/{{ $job.dir }}{{ $job.imageName }}:{{ $job.version }}"
            imagePullPolicy: IfNotPresent
            env:
              {{- range $key, $val := $job.envs }}
              - name: {{ $key }}
                value: {{ $val }}
              {{- end}}
              - name: APP_PROVISIONER_URL
                value: "{{ $.Values.provisioner.URL }}"
              {{if eq $.Values.global.database.embedded.enabled false}}
              - name: DATABASE_EMBEDDED
                value: "false"
              {{end}}
              {{if eq $.Values.global.database.embedded.enabled true}}
              - name: DATABASE_EMBEDDED
                value: "true"
              {{end}}
              - name: APP_DATABASE_SECRET_KEY
                valueFrom:
                  secretKeyRef:
                    name: "{{ $.Values.global.database.managedGCP.encryptionSecretName }}"
                    key: secretKey
                    optional: true
              - name: APP_DATABASE_USER
                valueFrom:
                  secretKeyRef:
                    key: postgresql-broker-username
                    name: kcp-postgresql
              - name: APP_DATABASE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: postgresql-broker-password
                    name: kcp-postgresql
              - name: APP_DATABASE_HOST
                valueFrom:
                  secretKeyRef:
                    key: postgresql-serviceName
                    name: kcp-postgresql
              - name: APP_DATABASE_PORT
                valueFrom:
                  secretKeyRef:
                    key: postgresql-servicePort
                    name: kcp-postgresql
              - name: APP_DATABASE_NAME
                valueFrom:
                  secretKeyRef:
                    key: postgresql-broker-db-name
                    name: kcp-postgresql
              - name: APP_DATABASE_SSLMODE
                valueFrom:
                  secretKeyRef:
                    key: postgresql-sslMode
                    name: kcp-postgresql
              - name: APP_DATABASE_SSLROOTCERT
                value: /secrets/cloudsql-sslrootcert/server-ca.pem
                - name: APP_BROKER_URL
                  value: "http://{{ include "kyma-env-broker.fullname" . }}"
              - name: APP_BROKER_SCOPE
                value: {{$.Values.kebClient.scope}}
            command:
              - "/bin/main"
            volumeMounts:
              {{- range $key, $val := $job.secretVolumes }}
              - name: {{ $key }}
                mountPath: {{ $val.path }}
                readOnly: true
              {{- end}}
              {{- if and (eq $.Values.global.database.embedded.enabled false) (eq $.Values.global.database.cloudsqlproxy.enabled false)}}
              - name: cloudsql-sslrootcert
                mountPath: /secrets/cloudsql-sslrootcert
                readOnly: true
              {{- end}}
              {{- if and (eq $.Values.global.database.embedded.enabled false) (eq $.Values.global.database.cloudsqlproxy.enabled true)}}
              - name: cloudsql-instance-credentials
                mountPath: /secrets/cloudsql-instance-credentials
                readOnly: true
          - name: cloudsql-proxy
            image: {{ $.Values.global.images.cloudsql_proxy_image }}
            command: [ "/cloud_sql_proxy",
                       "-instances={{ $.Values.global.database.managedGCP.instanceConnectionName }}=tcp:5432",
                       "-credential_file=/secrets/cloudsql-instance-credentials/credentials.json" ]
            volumeMounts:
              - name: cloudsql-instance-credentials
                mountPath: /secrets/cloudsql-instance-credentials
                readOnly: true
            {{- with $.Values.deployment.securityContext }}
            securityContext:
              {{ toYaml . }}
            {{- end }}
          {{- end}}
          volumes:
            {{- if and (eq $.Values.global.database.embedded.enabled false) (eq $.Values.global.database.cloudsqlproxy.enabled true)}}
            - name: cloudsql-instance-credentials
              secret:
                secretName: cloudsql-instance-credentials
            {{- end}}
            {{- if and (eq $.Values.global.database.embedded.enabled false) (eq $.Values.global.database.cloudsqlproxy.enabled false)}}
            - name: cloudsql-sslrootcert
              secret:
                secretName: kcp-postgresql
                items: 
                - key: postgresql-sslRootCert
                  path: server-ca.pem
                optional: true
            {{- end}}
            {{- range $key, $val := $job.secretVolumes }}
            - name: {{ $key }}
              secret: 
                optional: {{ $val.optional }}
                secretName: {{ $val.secret }}
                defaultMode: {{ $val.defaultMode}}
            {{- end}}
{{- end }} 
