apiVersion: batch/v1
kind: CronJob
metadata:
  name: trial-cleanup-job
spec:
  jobTemplate:
    metadata:
      name: trial-cleanup-job
    spec:
      template:
        spec:
          serviceAccountName: {{ .Values.global.kyma_environment_broker.serviceAccountName }}
          shareProcessNamespace: true
          {{- with .Values.deployment.securityContext }}
          securityContext:
            {{ toYaml . | nindent 12 }}
          {{- end }}
          restartPolicy: Never
          containers:
            - image: "{{ .Values.global.images.container_registry.path }}/{{ .Values.global.images.kyma_environment_trial_cleanup_job.dir }}kyma-environment-trial-cleanup-job:{{ .Values.global.images.kyma_environment_trial_cleanup_job.version }}"
              name: trial-cleanup-job
              env:
                {{if eq .Values.global.database.embedded.enabled true}}
                - name: DATABASE_EMBEDDED
                  value: "true"
                {{end}}
                {{if eq .Values.global.database.embedded.enabled false}}
                - name: DATABASE_EMBEDDED
                  value: "false"
                {{end}} 
                - name: APP_DRY_RUN
                  value: "{{ .Values.trialCleanup.dryRun }}"
                - name: APP_EXPIRATION_PERIOD
                  value: "{{ .Values.trialCleanup.expirationPeriod }}"
                - name: APP_DATABASE_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.global.database.managedGCP.encryptionSecretName }}"
                      key: secretKey
                      optional: true
                - name: APP_DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      name: kcp-postgresql
                      key: postgresql-broker-username
                - name: APP_DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: kcp-postgresql
                      key: postgresql-broker-password
                - name: APP_DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: kcp-postgresql
                      key: postgresql-serviceName
                - name: APP_DATABASE_PORT
                  valueFrom:
                    secretKeyRef:
                      name: kcp-postgresql
                      key: postgresql-servicePort
                - name: APP_DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: kcp-postgresql
                      key: postgresql-broker-db-name
                - name: APP_DATABASE_SSLMODE
                  valueFrom:
                    secretKeyRef:
                      name: kcp-postgresql
                      key: postgresql-sslMode
                - name: APP_DATABASE_SSLROOTCERT
                  value: /secrets/cloudsql-sslrootcert/server-ca.pem
                - name: APP_BROKER_URL
                  value: "http://{{ include "kyma-env-broker.fullname" . }}"
              command:
                - "/bin/main"
              volumeMounts:
              {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled false)}}
                - name: cloudsql-sslrootcert
                  mountPath: /secrets/cloudsql-sslrootcert
                  readOnly: true
              {{- end}}
            {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled true)}}
            - name: cloudsql-proxy
              image: {{ .Values.global.images.cloudsql_proxy_image }}
              {{- if .Values.global.database.cloudsqlproxy.workloadIdentity.enabled }}
              command: ["/cloud_sql_proxy",
                        "-instances={{ .Values.global.database.managedGCP.instanceConnectionName }}=tcp:5432"]
              {{- else }}
              command: ["/cloud_sql_proxy",
                        "-instances={{ .Values.global.database.managedGCP.instanceConnectionName }}=tcp:5432",
                        "-credential_file=/secrets/cloudsql-instance-credentials/credentials.json"]
              volumeMounts:
                - name: cloudsql-instance-credentials
                  mountPath: /secrets/cloudsql-instance-credentials
                  readOnly: true
              {{- end }}
              {{- with .Values.deployment.securityContext }}
              securityContext:
                {{ toYaml . | nindent 16 }}
              {{- end }}
            {{- end}}
          volumes:
          {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled true) (eq .Values.global.database.cloudsqlproxy.workloadIdentity.enabled false)}}
            - name: cloudsql-instance-credentials
              secret:
                secretName: cloudsql-instance-credentials
          {{- end}}
          {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled false)}}
            - name: cloudsql-sslrootcert
              secret:
                secretName: kcp-postgresql
                items: 
                - key: postgresql-sslRootCert
                  path: server-ca.pem
                optional: true
          {{- end}}
  schedule: "{{ .Values.trialCleanup.schedule }}"
