{{if eq .Values.global.kyma_environment_broker.environmentsCleanup.enabled true}}
{{- range $index, $job := .Values.setupJobs }}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: "{{$job.name}}"
  namespace: "{{$job.namespace}}"
spec:
  schedule: {{$job.schedule}}
  failedJobsHistoryLimit: 5
  successfulJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        cronjob: {{$job.cronJobName}}
    spec:
      template:
        metadata:
          name: {{$job.imageName}}
          labels:
            cronjob: {{$job.cronJobName}}
          {{- if eq .Values.global.database.embedded.enabled false }}
          annotations:
            sidecar.istio.io/inject: "false"
          {{ end }}
        spec:
          serviceAccountName: {{$job.name}}
          securityContext:
            runAsUser: 2000
          restartPolicy: Never
          shareProcessNamespace: true
          containers:
          - name: main
            image: "{{ .Values.global.images.containerRegistry.path }}/{{ $job.dir }}{{$job.imageName}}:{{ $job.version }}"
            imagePullPolicy: IfNotPresent
            env:
              {{if eq .Values.global.database.embedded.enabled false}}
              - name: DATABASE_EMBEDDED
                value: "false"
              {{end}}
              - name: APP_MAX_AGE_HOURS
                value: "{{ $job.maxAge }}"
              - name: APP_LABEL_SELECTOR
                value: "{{ $job.labelSelector }}"
              - name: APP_GARDENER_PROJECT
                value: "{{ .Values.gardener.project }}"
              - name: APP_GARDENER_KUBECONFIG_PATH
                value: "{{.Values.gardener.kubeconfigPath}}"
              - name: APP_PROVISIONER_URL
                value: "{{ .Values.provisioner.URL }}"
              - name: APP_DATABASE_SECRET_KEY
                valueFrom:
                  secretKeyRef:
                    name: "{{ .Values.global.database.managedGCP.encryptionSecretName }}"
                    key: secretKey
                    optional: true
              - name: APP_DATABASE_USER
                valueFrom:
                  secretKeyRef:
                    key: postgresql-broker-username
                    name: kcp-postgresql
              - name: APP_DATABASE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: postgresql-broker-password
                    name: kcp-postgresql
              - name: APP_DATABASE_HOST
                valueFrom:
                  secretKeyRef:
                    key: postgresql-serviceName
                    name: kcp-postgresql
              - name: APP_DATABASE_PORT
                valueFrom:
                  secretKeyRef:
                    key: postgresql-servicePort
                    name: kcp-postgresql
              - name: APP_DATABASE_NAME
                valueFrom:
                  secretKeyRef:
                    key: postgresql-broker-db-name
                    name: kcp-postgresql
              - name: APP_DATABASE_SSLMODE
                valueFrom:
                  secretKeyRef:
                    key: postgresql-sslMode
                    name: kcp-postgresql
              - name: APP_DATABASE_SSLROOTCERT
                value: /secrets/cloudsql-sslrootcert/server-ca.pem
              - name: APP_BROKER_URL
                value: "https://{{ .Values.host }}.{{ .Values.global.ingress.domainName }}"
              - name: APP_BROKER_TOKEN_URL
                value: "https://oauth2.{{ .Values.global.ingress.domainName }}/oauth2/token"
              - name: APP_BROKER_CLIENT_ID
                valueFrom:
                  secretKeyRef:
                    key: client_id
                    name: {{ include "kyma-env-broker.fullname" . }}-oauth
              - name: APP_BROKER_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    key: client_secret
                    name: {{ include "kyma-env-broker.fullname" . }}-oauth
              - name: APP_BROKER_SCOPE
                value: {{.Values.kebClient.scope}}
            command:
              - "./bin/main"
            volumeMounts:
              - mountPath: /gardener/kubeconfig
                name: gardener-kubeconfig
                readOnly: true
          {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled false)}}
              - name: cloudsql-sslrootcert
                mountPath: /secrets/cloudsql-sslrootcert
                readOnly: true
          {{- end}}
          {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled true)}}
              - name: cloudsql-instance-credentials
                mountPath: /secrets/cloudsql-instance-credentials
                readOnly: true
          - name: cloudsql-proxy
            image: {{ .Values.global.images.cloudsql_proxy_image }}
            command: [ "/cloud_sql_proxy",
                       "-instances={{ .Values.global.database.managedGCP.instanceConnectionName }}=tcp:5432",
                       "-credential_file=/secrets/cloudsql-instance-credentials/credentials.json" ]
            volumeMounts:
              - name: cloudsql-instance-credentials
                mountPath: /secrets/cloudsql-instance-credentials
                readOnly: true
            securityContext:
              runAsUser: 2000
          {{- end}}
          volumes:
            {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled true)}}
            - name: cloudsql-instance-credentials
              secret:
                secretName: cloudsql-instance-credentials
            {{- end}}
            {{- if and (eq .Values.global.database.embedded.enabled false) (eq .Values.global.database.cloudsqlproxy.enabled false)}}
            - name: cloudsql-sslrootcert
              secret:
                secretName: kcp-postgresql
                items: 
                - key: postgresql-sslRootCert
                  path: server-ca.pem
                optional: true
            {{- end}}
            - name: gardener-kubeconfig
              secret:
                optional: true
                defaultMode: 420
                secretName: gardener-credentials
{{- end }} 
{{end}}
