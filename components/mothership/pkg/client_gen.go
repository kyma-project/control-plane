// Package mothership provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package mothership

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostClusters request with any body
	PostClustersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClusters(ctx context.Context, body PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutClusters request with any body
	PutClustersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutClusters(ctx context.Context, body PutClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClustersCluster request
	DeleteClustersCluster(ctx context.Context, cluster string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClustersClusterConfigConfigVersionStatus request
	GetClustersClusterConfigConfigVersionStatus(ctx context.Context, cluster string, configVersion string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClustersClusterStatus request
	GetClustersClusterStatus(ctx context.Context, cluster string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClustersClusterStatusChanges request
	GetClustersClusterStatusChanges(ctx context.Context, cluster string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReconciles request
	GetReconciles(ctx context.Context, params *GetReconcilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostClustersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClustersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClusters(ctx context.Context, body PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClustersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClustersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClustersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClusters(ctx context.Context, body PutClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClustersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClustersCluster(ctx context.Context, cluster string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClustersClusterRequest(c.Server, cluster)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClustersClusterConfigConfigVersionStatus(ctx context.Context, cluster string, configVersion string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersClusterConfigConfigVersionStatusRequest(c.Server, cluster, configVersion)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClustersClusterStatus(ctx context.Context, cluster string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersClusterStatusRequest(c.Server, cluster)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClustersClusterStatusChanges(ctx context.Context, cluster string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersClusterStatusChangesRequest(c.Server, cluster)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReconciles(ctx context.Context, params *GetReconcilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReconcilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostClustersRequest calls the generic PostClusters builder with application/json body
func NewPostClustersRequest(server string, body PostClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClustersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostClustersRequestWithBody generates requests for PostClusters with any type of body
func NewPostClustersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutClustersRequest calls the generic PutClusters builder with application/json body
func NewPutClustersRequest(server string, body PutClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutClustersRequestWithBody(server, "application/json", bodyReader)
}

// NewPutClustersRequestWithBody generates requests for PutClusters with any type of body
func NewPutClustersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClustersClusterRequest generates requests for DeleteClustersCluster
func NewDeleteClustersClusterRequest(server string, cluster string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster", runtime.ParamLocationPath, cluster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClustersClusterConfigConfigVersionStatusRequest generates requests for GetClustersClusterConfigConfigVersionStatus
func NewGetClustersClusterConfigConfigVersionStatusRequest(server string, cluster string, configVersion string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster", runtime.ParamLocationPath, cluster)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "configVersion", runtime.ParamLocationPath, configVersion)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/%s/config/%s/status", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClustersClusterStatusRequest generates requests for GetClustersClusterStatus
func NewGetClustersClusterStatusRequest(server string, cluster string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster", runtime.ParamLocationPath, cluster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClustersClusterStatusChangesRequest generates requests for GetClustersClusterStatusChanges
func NewGetClustersClusterStatusChangesRequest(server string, cluster string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster", runtime.ParamLocationPath, cluster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/%s/statusChanges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReconcilesRequest generates requests for GetReconciles
func NewGetReconcilesRequest(server string, params *GetReconcilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reconciles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.RuntimeIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "runtimeIDs", runtime.ParamLocationQuery, *params.RuntimeIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Statuses != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Shoots != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shoots", runtime.ParamLocationQuery, *params.Shoots); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostClusters request with any body
	PostClustersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClustersResponse, error)

	PostClustersWithResponse(ctx context.Context, body PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClustersResponse, error)

	// PutClusters request with any body
	PutClustersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClustersResponse, error)

	PutClustersWithResponse(ctx context.Context, body PutClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClustersResponse, error)

	// DeleteClustersCluster request
	DeleteClustersClusterWithResponse(ctx context.Context, cluster string, reqEditors ...RequestEditorFn) (*DeleteClustersClusterResponse, error)

	// GetClustersClusterConfigConfigVersionStatus request
	GetClustersClusterConfigConfigVersionStatusWithResponse(ctx context.Context, cluster string, configVersion string, reqEditors ...RequestEditorFn) (*GetClustersClusterConfigConfigVersionStatusResponse, error)

	// GetClustersClusterStatus request
	GetClustersClusterStatusWithResponse(ctx context.Context, cluster string, reqEditors ...RequestEditorFn) (*GetClustersClusterStatusResponse, error)

	// GetClustersClusterStatusChanges request
	GetClustersClusterStatusChangesWithResponse(ctx context.Context, cluster string, reqEditors ...RequestEditorFn) (*GetClustersClusterStatusChangesResponse, error)

	// GetReconciles request
	GetReconcilesWithResponse(ctx context.Context, params *GetReconcilesParams, reqEditors ...RequestEditorFn) (*GetReconcilesResponse, error)
}

type PostClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HTTPClusterResponse
	JSON400      *HTTPErrorResponse
	JSON500      *HTTPErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HTTPClusterResponse
	JSON400      *HTTPErrorResponse
	JSON500      *HTTPErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClustersClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HTTPClusterResponse
	JSON400      *HTTPErrorResponse
	JSON404      *HTTPErrorResponse
	JSON500      *HTTPErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteClustersClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClustersClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClustersClusterConfigConfigVersionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HTTPClusterResponse
	JSON400      *HTTPErrorResponse
	JSON404      *HTTPErrorResponse
	JSON500      *HTTPErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetClustersClusterConfigConfigVersionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClustersClusterConfigConfigVersionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClustersClusterStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HTTPClusterResponse
	JSON400      *HTTPErrorResponse
	JSON404      *HTTPErrorResponse
	JSON500      *HTTPErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetClustersClusterStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClustersClusterStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClustersClusterStatusChangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HTTPClusterStatusResponse
	JSON400      *HTTPErrorResponse
	JSON404      *HTTPErrorResponse
	JSON500      *HTTPErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetClustersClusterStatusChangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClustersClusterStatusChangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReconcilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HTTPReconcilerStatus
	JSON400      *HTTPErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetReconcilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReconcilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostClustersWithBodyWithResponse request with arbitrary body returning *PostClustersResponse
func (c *ClientWithResponses) PostClustersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClustersResponse, error) {
	rsp, err := c.PostClustersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClustersResponse(rsp)
}

func (c *ClientWithResponses) PostClustersWithResponse(ctx context.Context, body PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClustersResponse, error) {
	rsp, err := c.PostClusters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClustersResponse(rsp)
}

// PutClustersWithBodyWithResponse request with arbitrary body returning *PutClustersResponse
func (c *ClientWithResponses) PutClustersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClustersResponse, error) {
	rsp, err := c.PutClustersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClustersResponse(rsp)
}

func (c *ClientWithResponses) PutClustersWithResponse(ctx context.Context, body PutClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClustersResponse, error) {
	rsp, err := c.PutClusters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClustersResponse(rsp)
}

// DeleteClustersClusterWithResponse request returning *DeleteClustersClusterResponse
func (c *ClientWithResponses) DeleteClustersClusterWithResponse(ctx context.Context, cluster string, reqEditors ...RequestEditorFn) (*DeleteClustersClusterResponse, error) {
	rsp, err := c.DeleteClustersCluster(ctx, cluster, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClustersClusterResponse(rsp)
}

// GetClustersClusterConfigConfigVersionStatusWithResponse request returning *GetClustersClusterConfigConfigVersionStatusResponse
func (c *ClientWithResponses) GetClustersClusterConfigConfigVersionStatusWithResponse(ctx context.Context, cluster string, configVersion string, reqEditors ...RequestEditorFn) (*GetClustersClusterConfigConfigVersionStatusResponse, error) {
	rsp, err := c.GetClustersClusterConfigConfigVersionStatus(ctx, cluster, configVersion, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersClusterConfigConfigVersionStatusResponse(rsp)
}

// GetClustersClusterStatusWithResponse request returning *GetClustersClusterStatusResponse
func (c *ClientWithResponses) GetClustersClusterStatusWithResponse(ctx context.Context, cluster string, reqEditors ...RequestEditorFn) (*GetClustersClusterStatusResponse, error) {
	rsp, err := c.GetClustersClusterStatus(ctx, cluster, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersClusterStatusResponse(rsp)
}

// GetClustersClusterStatusChangesWithResponse request returning *GetClustersClusterStatusChangesResponse
func (c *ClientWithResponses) GetClustersClusterStatusChangesWithResponse(ctx context.Context, cluster string, reqEditors ...RequestEditorFn) (*GetClustersClusterStatusChangesResponse, error) {
	rsp, err := c.GetClustersClusterStatusChanges(ctx, cluster, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersClusterStatusChangesResponse(rsp)
}

// GetReconcilesWithResponse request returning *GetReconcilesResponse
func (c *ClientWithResponses) GetReconcilesWithResponse(ctx context.Context, params *GetReconcilesParams, reqEditors ...RequestEditorFn) (*GetReconcilesResponse, error) {
	rsp, err := c.GetReconciles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReconcilesResponse(rsp)
}

// ParsePostClustersResponse parses an HTTP response from a PostClustersWithResponse call
func ParsePostClustersResponse(rsp *http.Response) (*PostClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HTTPClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutClustersResponse parses an HTTP response from a PutClustersWithResponse call
func ParsePutClustersResponse(rsp *http.Response) (*PutClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HTTPClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteClustersClusterResponse parses an HTTP response from a DeleteClustersClusterWithResponse call
func ParseDeleteClustersClusterResponse(rsp *http.Response) (*DeleteClustersClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClustersClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HTTPClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetClustersClusterConfigConfigVersionStatusResponse parses an HTTP response from a GetClustersClusterConfigConfigVersionStatusWithResponse call
func ParseGetClustersClusterConfigConfigVersionStatusResponse(rsp *http.Response) (*GetClustersClusterConfigConfigVersionStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClustersClusterConfigConfigVersionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HTTPClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetClustersClusterStatusResponse parses an HTTP response from a GetClustersClusterStatusWithResponse call
func ParseGetClustersClusterStatusResponse(rsp *http.Response) (*GetClustersClusterStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClustersClusterStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HTTPClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetClustersClusterStatusChangesResponse parses an HTTP response from a GetClustersClusterStatusChangesWithResponse call
func ParseGetClustersClusterStatusChangesResponse(rsp *http.Response) (*GetClustersClusterStatusChangesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClustersClusterStatusChangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HTTPClusterStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetReconcilesResponse parses an HTTP response from a GetReconcilesWithResponse call
func ParseGetReconcilesResponse(rsp *http.Response) (*GetReconcilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReconcilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HTTPReconcilerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HTTPErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
