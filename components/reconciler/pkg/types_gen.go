// Package mothership provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package mothership

import (
	"time"
)

// Defines values for Status.
const (
	StatusDeleteError Status = "delete_error"

	StatusDeleteErrorRetryable Status = "delete_error_retryable"

	StatusDeletePending Status = "delete_pending"

	StatusDeleted Status = "deleted"

	StatusDeleting Status = "deleting"

	StatusError Status = "error"

	StatusReady Status = "ready"

	StatusReconcileDisabled Status = "reconcile_disabled"

	StatusReconcileErrorRetryable Status = "reconcile_error_retryable"

	StatusReconcilePending Status = "reconcile_pending"

	StatusReconciling Status = "reconciling"
)

// HTTPClusterConfig defines model for HTTPClusterConfig.
type HTTPClusterConfig KymaConfig

// HTTPClusterResponse defines model for HTTPClusterResponse.
type HTTPClusterResponse struct {
	Cluster              string     `json:"cluster"`
	ClusterVersion       int64      `json:"clusterVersion"`
	ConfigurationVersion int64      `json:"configurationVersion"`
	Failures             *[]Failure `json:"failures,omitempty"`
	Status               Status     `json:"status"`
	StatusURL            string     `json:"statusURL"`
}

// HTTPClusterStateResponse defines model for HTTPClusterStateResponse.
type HTTPClusterStateResponse struct {
	Cluster       ClusterState              `json:"cluster"`
	Configuration ClusterStateConfiguration `json:"configuration"`
	Status        ClusterStateStatus        `json:"status"`
}

// HTTPClusterStatusResponse defines model for HTTPClusterStatusResponse.
type HTTPClusterStatusResponse struct {
	StatusChanges []StatusChange `json:"statusChanges"`
}

// HTTPErrorResponse defines model for HTTPErrorResponse.
type HTTPErrorResponse struct {
	Error string `json:"error"`
}

// HTTPReconcilerStatus defines model for HTTPReconcilerStatus.
type HTTPReconcilerStatus []Reconciliation

// HTTPReconciliationInfo defines model for HTTPReconciliationInfo.
type HTTPReconciliationInfo struct {
	ConfigVersion int64       `json:"configVersion"`
	Created       time.Time   `json:"created"`
	Finished      bool        `json:"finished"`
	Operations    []Operation `json:"operations"`
	RuntimeID     string      `json:"runtimeID"`
	SchedulingID  string      `json:"schedulingID"`
	Status        Status      `json:"status"`
	Updated       time.Time   `json:"updated"`
}

// Cluster defines model for cluster.
type Cluster struct {
	// valid kubeconfig to cluster
	Kubeconfig   string       `json:"kubeconfig"`
	KymaConfig   KymaConfig   `json:"kymaConfig"`
	Metadata     Metadata     `json:"metadata"`
	RuntimeID    string       `json:"runtimeID"`
	RuntimeInput RuntimeInput `json:"runtimeInput"`
}

// ClusterState defines model for clusterState.
type ClusterState struct {
	Contract  *int64        `json:"contract,omitempty"`
	Created   *time.Time    `json:"created,omitempty"`
	Metadata  *Metadata     `json:"metadata,omitempty"`
	Runtime   *RuntimeInput `json:"runtime,omitempty"`
	RuntimeID *string       `json:"runtimeID,omitempty"`
	Version   *int64        `json:"version,omitempty"`
}

// ClusterStateConfiguration defines model for clusterStateConfiguration.
type ClusterStateConfiguration struct {
	Administrators *[]string    `json:"administrators,omitempty"`
	ClusterVersion *int64       `json:"clusterVersion,omitempty"`
	Components     *[]Component `json:"components,omitempty"`
	Contract       *int64       `json:"contract,omitempty"`
	Created        *time.Time   `json:"created,omitempty"`
	Deleted        *bool        `json:"deleted,omitempty"`
	KymaProfile    *string      `json:"kymaProfile,omitempty"`
	KymaVersion    *string      `json:"kymaVersion,omitempty"`
	RuntimeID      *string      `json:"runtimeID,omitempty"`
	Version        *int64       `json:"version,omitempty"`
}

// ClusterStateStatus defines model for clusterStateStatus.
type ClusterStateStatus struct {
	ClusterVersion *int64     `json:"clusterVersion,omitempty"`
	ConfigVersion  *int64     `json:"configVersion,omitempty"`
	Created        *time.Time `json:"created,omitempty"`
	Deleted        *bool      `json:"deleted,omitempty"`
	Id             *int64     `json:"id,omitempty"`
	RuntimeID      *string    `json:"runtimeID,omitempty"`
	Status         *Status    `json:"status,omitempty"`
}

// Component defines model for component.
type Component struct {
	URL           string          `json:"URL"`
	Component     string          `json:"component"`
	Configuration []Configuration `json:"configuration"`
	Namespace     string          `json:"namespace"`
	Version       string          `json:"version"`
}

// Configuration defines model for configuration.
type Configuration struct {
	Key    string      `json:"key"`
	Secret bool        `json:"secret"`
	Value  interface{} `json:"value"`
}

// Failure defines model for failure.
type Failure struct {
	Component string `json:"component"`
	Reason    string `json:"reason"`
}

// KymaConfig defines model for kymaConfig.
type KymaConfig struct {
	Administrators []string    `json:"administrators"`
	Components     []Component `json:"components"`
	Profile        string      `json:"profile"`
	Version        string      `json:"version"`
}

// Metadata defines model for metadata.
type Metadata struct {
	GlobalAccountID string `json:"globalAccountID"`
	InstanceID      string `json:"instanceID"`
	Region          string `json:"region"`
	ServiceID       string `json:"serviceID"`
	ServicePlanID   string `json:"servicePlanID"`
	ServicePlanName string `json:"servicePlanName"`
	ShootName       string `json:"shootName"`
	SubAccountID    string `json:"subAccountID"`
}

// Operation defines model for operation.
type Operation struct {
	Component     string    `json:"component"`
	CorrelationID string    `json:"correlationID"`
	Created       time.Time `json:"created"`
	Priority      int64     `json:"priority"`
	Reason        string    `json:"reason"`
	SchedulingID  string    `json:"schedulingID"`
	State         string    `json:"state"`
	Type          string    `json:"type"`
	Updated       time.Time `json:"updated"`
}

// OperationStop defines model for operationStop.
type OperationStop struct {
	Reason string `json:"reason"`
}

// Reconciliation defines model for reconciliation.
type Reconciliation struct {
	Created      time.Time `json:"created"`
	Finished     bool      `json:"finished"`
	Lock         string    `json:"lock"`
	RuntimeID    string    `json:"runtimeID"`
	SchedulingID string    `json:"schedulingID"`
	Status       Status    `json:"status"`
	Updated      time.Time `json:"updated"`
}

// RuntimeInput defines model for runtimeInput.
type RuntimeInput struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Status defines model for status.
type Status string

// StatusChange defines model for statusChange.
type StatusChange struct {
	Duration int64     `json:"duration"`
	Started  time.Time `json:"started"`
	Status   Status    `json:"status"`
}

// StatusUpdate defines model for statusUpdate.
type StatusUpdate struct {
	Status Status `json:"status"`
}

// BadRequest defines model for BadRequest.
type BadRequest HTTPErrorResponse

// InternalError defines model for InternalError.
type InternalError HTTPErrorResponse

// NotFoundResponse defines model for NotFoundResponse.
type NotFoundResponse HTTPErrorResponse

// Ok defines model for Ok.
type Ok HTTPClusterResponse

// ReconcilationsOKResponse defines model for ReconcilationsOKResponse.
type ReconcilationsOKResponse HTTPReconcilerStatus

// ReconciliationInfoOKResponse defines model for ReconciliationInfoOKResponse.
type ReconciliationInfoOKResponse HTTPReconciliationInfo

// ConfigurationOkResponse defines model for configurationOkResponse.
type ConfigurationOkResponse HTTPClusterConfig

// PostClustersJSONBody defines parameters for PostClusters.
type PostClustersJSONBody Cluster

// PutClustersJSONBody defines parameters for PutClusters.
type PutClustersJSONBody Cluster

// GetClustersStateParams defines parameters for GetClustersState.
type GetClustersStateParams struct {
	RuntimeID     *string `json:"runtimeID,omitempty"`
	SchedulingID  *string `json:"schedulingID,omitempty"`
	CorrelationID *string `json:"correlationID,omitempty"`
}

// PutClustersRuntimeIDStatusJSONBody defines parameters for PutClustersRuntimeIDStatus.
type PutClustersRuntimeIDStatusJSONBody StatusUpdate

// PostOperationsSchedulingIDCorrelationIDStopJSONBody defines parameters for PostOperationsSchedulingIDCorrelationIDStop.
type PostOperationsSchedulingIDCorrelationIDStopJSONBody OperationStop

// GetReconciliationsParams defines parameters for GetReconciliations.
type GetReconciliationsParams struct {
	RuntimeID *[]string  `json:"runtimeID,omitempty"`
	Before    *time.Time `json:"before,omitempty"`
	After     *time.Time `json:"after,omitempty"`
	Last      *int       `json:"last,omitempty"`
	Status    *[]Status  `json:"status,omitempty"`
}

// PostClustersJSONRequestBody defines body for PostClusters for application/json ContentType.
type PostClustersJSONRequestBody PostClustersJSONBody

// PutClustersJSONRequestBody defines body for PutClusters for application/json ContentType.
type PutClustersJSONRequestBody PutClustersJSONBody

// PutClustersRuntimeIDStatusJSONRequestBody defines body for PutClustersRuntimeIDStatus for application/json ContentType.
type PutClustersRuntimeIDStatusJSONRequestBody PutClustersRuntimeIDStatusJSONBody

// PostOperationsSchedulingIDCorrelationIDStopJSONRequestBody defines body for PostOperationsSchedulingIDCorrelationIDStop for application/json ContentType.
type PostOperationsSchedulingIDCorrelationIDStopJSONRequestBody PostOperationsSchedulingIDCorrelationIDStopJSONBody
