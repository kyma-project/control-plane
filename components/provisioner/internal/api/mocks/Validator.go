// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	apperrors "github.com/kyma-project/control-plane/components/provisioner/internal/apperrors"
	gqlschema "github.com/kyma-project/control-plane/components/provisioner/pkg/gqlschema"

	mock "github.com/stretchr/testify/mock"
)

// Validator is an autogenerated mock type for the Validator type
type Validator struct {
	mock.Mock
}

// ValidateProvisioningInput provides a mock function with given fields: input
func (_m *Validator) ValidateProvisioningInput(input gqlschema.ProvisionRuntimeInput) apperrors.AppError {
	ret := _m.Called(input)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(gqlschema.ProvisionRuntimeInput) apperrors.AppError); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// ValidateUpgradeInput provides a mock function with given fields: input
func (_m *Validator) ValidateUpgradeInput(input gqlschema.UpgradeRuntimeInput) apperrors.AppError {
	ret := _m.Called(input)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(gqlschema.UpgradeRuntimeInput) apperrors.AppError); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// ValidateUpgradeShootInput provides a mock function with given fields: input
func (_m *Validator) ValidateUpgradeShootInput(input gqlschema.UpgradeShootInput) apperrors.AppError {
	ret := _m.Called(input)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(gqlschema.UpgradeShootInput) apperrors.AppError); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}
