// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	apperrors "github.com/kyma-project/control-plane/components/provisioner/internal/apperrors"
	dbsession "github.com/kyma-project/control-plane/components/provisioner/internal/provisioning/persistence/dbsession"
	mock "github.com/stretchr/testify/mock"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

// NewReadSession provides a mock function with given fields:
func (_m *Factory) NewReadSession() dbsession.ReadSession {
	ret := _m.Called()

	var r0 dbsession.ReadSession
	if rf, ok := ret.Get(0).(func() dbsession.ReadSession); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbsession.ReadSession)
		}
	}

	return r0
}

// NewReadWriteSession provides a mock function with given fields:
func (_m *Factory) NewReadWriteSession() dbsession.ReadWriteSession {
	ret := _m.Called()

	var r0 dbsession.ReadWriteSession
	if rf, ok := ret.Get(0).(func() dbsession.ReadWriteSession); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbsession.ReadWriteSession)
		}
	}

	return r0
}

// NewSessionWithinTransaction provides a mock function with given fields:
func (_m *Factory) NewSessionWithinTransaction() (dbsession.WriteSessionWithinTransaction, apperrors.AppError) {
	ret := _m.Called()

	var r0 dbsession.WriteSessionWithinTransaction
	var r1 apperrors.AppError
	if rf, ok := ret.Get(0).(func() (dbsession.WriteSessionWithinTransaction, apperrors.AppError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() dbsession.WriteSessionWithinTransaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbsession.WriteSessionWithinTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func() apperrors.AppError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// NewWriteSession provides a mock function with given fields:
func (_m *Factory) NewWriteSession() dbsession.WriteSession {
	ret := _m.Called()

	var r0 dbsession.WriteSession
	if rf, ok := ret.Get(0).(func() dbsession.WriteSession); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbsession.WriteSession)
		}
	}

	return r0
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
