// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	apperrors "github.com/kyma-project/control-plane/components/provisioner/internal/apperrors"
	mock "github.com/stretchr/testify/mock"

	v1beta1 "github.com/gardener/gardener/pkg/apis/core/v1beta1"
)

// ShootProvider is an autogenerated mock type for the ShootProvider type
type ShootProvider struct {
	mock.Mock
}

// Get provides a mock function with given fields: runtimeID, tenant
func (_m *ShootProvider) Get(runtimeID string, tenant string) (v1beta1.Shoot, apperrors.AppError) {
	ret := _m.Called(runtimeID, tenant)

	var r0 v1beta1.Shoot
	if rf, ok := ret.Get(0).(func(string, string) v1beta1.Shoot); ok {
		r0 = rf(runtimeID, tenant)
	} else {
		r0 = ret.Get(0).(v1beta1.Shoot)
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, string) apperrors.AppError); ok {
		r1 = rf(runtimeID, tenant)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

type NewShootProviderT interface {
	mock.TestingT
	Cleanup(func())
}

// NewShootProvider creates a new instance of ShootProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewShootProvider(t NewShootProviderT) *ShootProvider {
	mock := &ShootProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
