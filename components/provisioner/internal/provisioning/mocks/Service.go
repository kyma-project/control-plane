// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	apperrors "github.com/kyma-project/control-plane/components/provisioner/internal/apperrors"
	gqlschema "github.com/kyma-project/control-plane/components/provisioner/pkg/gqlschema"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeprovisionRuntime provides a mock function with given fields: id
func (_m *Service) DeprovisionRuntime(id string) (string, apperrors.AppError) {
	ret := _m.Called(id)

	var r0 string
	var r1 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string) (string, apperrors.AppError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) apperrors.AppError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// ProvisionRuntime provides a mock function with given fields: config, tenant, subAccount
func (_m *Service) ProvisionRuntime(config gqlschema.ProvisionRuntimeInput, tenant string, subAccount string) (*gqlschema.OperationStatus, apperrors.AppError) {
	ret := _m.Called(config, tenant, subAccount)

	var r0 *gqlschema.OperationStatus
	var r1 apperrors.AppError
	if rf, ok := ret.Get(0).(func(gqlschema.ProvisionRuntimeInput, string, string) (*gqlschema.OperationStatus, apperrors.AppError)); ok {
		return rf(config, tenant, subAccount)
	}
	if rf, ok := ret.Get(0).(func(gqlschema.ProvisionRuntimeInput, string, string) *gqlschema.OperationStatus); ok {
		r0 = rf(config, tenant, subAccount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.OperationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(gqlschema.ProvisionRuntimeInput, string, string) apperrors.AppError); ok {
		r1 = rf(config, tenant, subAccount)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// ReconnectRuntimeAgent provides a mock function with given fields: id
func (_m *Service) ReconnectRuntimeAgent(id string) (string, apperrors.AppError) {
	ret := _m.Called(id)

	var r0 string
	var r1 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string) (string, apperrors.AppError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) apperrors.AppError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// RuntimeOperationStatus provides a mock function with given fields: id
func (_m *Service) RuntimeOperationStatus(id string) (*gqlschema.OperationStatus, apperrors.AppError) {
	ret := _m.Called(id)

	var r0 *gqlschema.OperationStatus
	var r1 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string) (*gqlschema.OperationStatus, apperrors.AppError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gqlschema.OperationStatus); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.OperationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(string) apperrors.AppError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// RuntimeStatus provides a mock function with given fields: id
func (_m *Service) RuntimeStatus(id string) (*gqlschema.RuntimeStatus, apperrors.AppError) {
	ret := _m.Called(id)

	var r0 *gqlschema.RuntimeStatus
	var r1 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string) (*gqlschema.RuntimeStatus, apperrors.AppError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gqlschema.RuntimeStatus); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.RuntimeStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(string) apperrors.AppError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// UpgradeGardenerShoot provides a mock function with given fields: id, input
func (_m *Service) UpgradeGardenerShoot(id string, input gqlschema.UpgradeShootInput) (*gqlschema.OperationStatus, apperrors.AppError) {
	ret := _m.Called(id, input)

	var r0 *gqlschema.OperationStatus
	var r1 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, gqlschema.UpgradeShootInput) (*gqlschema.OperationStatus, apperrors.AppError)); ok {
		return rf(id, input)
	}
	if rf, ok := ret.Get(0).(func(string, gqlschema.UpgradeShootInput) *gqlschema.OperationStatus); ok {
		r0 = rf(id, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.OperationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(string, gqlschema.UpgradeShootInput) apperrors.AppError); ok {
		r1 = rf(id, input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
