// Code generated by mockery v2.0.4. DO NOT EDIT.

package mocks

import (
	context "context"

	compute "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2020-06-01/compute"

	eventhub "github.com/Azure/azure-sdk-for-go/services/eventhub/mgmt/2017-04-01/eventhub"

	insights "github.com/Azure/azure-sdk-for-go/services/preview/monitor/mgmt/2019-06-01/insights"

	log "github.com/kyma-project/control-plane/components/metris/internal/log"

	mock "github.com/stretchr/testify/mock"

	network "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2020-05-01/network"

	resources "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2019-05-01/resources"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetDisks provides a mock function with given fields: ctx, rgname
func (_m *Client) GetDisks(ctx context.Context, rgname string) ([]compute.Disk, error) {
	ret := _m.Called(ctx, rgname)

	var r0 []compute.Disk
	if rf, ok := ret.Get(0).(func(context.Context, string) []compute.Disk); ok {
		r0 = rf(ctx, rgname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]compute.Disk)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rgname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEHNamespaces provides a mock function with given fields: ctx, rgname
func (_m *Client) GetEHNamespaces(ctx context.Context, rgname string) ([]eventhub.EHNamespace, error) {
	ret := _m.Called(ctx, rgname)

	var r0 []eventhub.EHNamespace
	if rf, ok := ret.Get(0).(func(context.Context, string) []eventhub.EHNamespace); ok {
		r0 = rf(ctx, rgname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]eventhub.EHNamespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rgname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancers provides a mock function with given fields: ctx, rgname
func (_m *Client) GetLoadBalancers(ctx context.Context, rgname string) ([]network.LoadBalancer, error) {
	ret := _m.Called(ctx, rgname)

	var r0 []network.LoadBalancer
	if rf, ok := ret.Get(0).(func(context.Context, string) []network.LoadBalancer); ok {
		r0 = rf(ctx, rgname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.LoadBalancer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rgname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricValues provides a mock function with given fields: ctx, resourceURI, interval, metricnames, aggregations
func (_m *Client) GetMetricValues(ctx context.Context, resourceURI string, interval string, metricnames []string, aggregations []string) (map[string]insights.MetricValue, []error) {
	ret := _m.Called(ctx, resourceURI, interval, metricnames, aggregations)

	var r0 map[string]insights.MetricValue
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, []string) map[string]insights.MetricValue); ok {
		r0 = rf(ctx, resourceURI, interval, metricnames, aggregations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]insights.MetricValue)
		}
	}

	var r1 []error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string, []string) []error); ok {
		r1 = rf(ctx, resourceURI, interval, metricnames, aggregations)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}

	return r0, r1
}

// GetPublicIPAddresses provides a mock function with given fields: ctx, rgname
func (_m *Client) GetPublicIPAddresses(ctx context.Context, rgname string) ([]network.PublicIPAddress, error) {
	ret := _m.Called(ctx, rgname)

	var r0 []network.PublicIPAddress
	if rf, ok := ret.Get(0).(func(context.Context, string) []network.PublicIPAddress); ok {
		r0 = rf(ctx, rgname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.PublicIPAddress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rgname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceGroup provides a mock function with given fields: ctx, name, filter, logger
func (_m *Client) GetResourceGroup(ctx context.Context, name string, filter string, logger log.Logger) (resources.Group, error) {
	ret := _m.Called(ctx, name, filter, logger)

	var r0 resources.Group
	if rf, ok := ret.Get(0).(func(context.Context, string, string, log.Logger) resources.Group); ok {
		r0 = rf(ctx, name, filter, logger)
	} else {
		r0 = ret.Get(0).(resources.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, log.Logger) error); ok {
		r1 = rf(ctx, name, filter, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVMResourceSkus provides a mock function with given fields: ctx, filter
func (_m *Client) GetVMResourceSkus(ctx context.Context, filter string) ([]compute.ResourceSku, error) {
	ret := _m.Called(ctx, filter)

	var r0 []compute.ResourceSku
	if rf, ok := ret.Get(0).(func(context.Context, string) []compute.ResourceSku); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]compute.ResourceSku)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVirtualMachines provides a mock function with given fields: ctx, rgname
func (_m *Client) GetVirtualMachines(ctx context.Context, rgname string) ([]compute.VirtualMachine, error) {
	ret := _m.Called(ctx, rgname)

	var r0 []compute.VirtualMachine
	if rf, ok := ret.Get(0).(func(context.Context, string) []compute.VirtualMachine); ok {
		r0 = rf(ctx, rgname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]compute.VirtualMachine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rgname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVirtualNetworks provides a mock function with given fields: ctx, rgname
func (_m *Client) GetVirtualNetworks(ctx context.Context, rgname string) ([]network.VirtualNetwork, error) {
	ret := _m.Called(ctx, rgname)

	var r0 []network.VirtualNetwork
	if rf, ok := ret.Get(0).(func(context.Context, string) []network.VirtualNetwork); ok {
		r0 = rf(ctx, rgname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.VirtualNetwork)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rgname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
