// Code generated by mockery v2.10.6. DO NOT EDIT.

package mocks

import (
	internal "github.com/kyma-project/control-plane/components/kyma-environment-broker/internal"
	dbmodel "github.com/kyma-project/control-plane/components/kyma-environment-broker/internal/storage/dbmodel"

	mock "github.com/stretchr/testify/mock"
)

// Operations is an autogenerated mock type for the Operations type
type Operations struct {
	mock.Mock
}

// GetDeprovisioningOperationByID provides a mock function with given fields: operationID
func (_m *Operations) GetDeprovisioningOperationByID(operationID string) (*internal.DeprovisioningOperation, error) {
	ret := _m.Called(operationID)

	var r0 *internal.DeprovisioningOperation
	if rf, ok := ret.Get(0).(func(string) *internal.DeprovisioningOperation); ok {
		r0 = rf(operationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.DeprovisioningOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(operationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeprovisioningOperationByInstanceID provides a mock function with given fields: instanceID
func (_m *Operations) GetDeprovisioningOperationByInstanceID(instanceID string) (*internal.DeprovisioningOperation, error) {
	ret := _m.Called(instanceID)

	var r0 *internal.DeprovisioningOperation
	if rf, ok := ret.Get(0).(func(string) *internal.DeprovisioningOperation); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.DeprovisioningOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastOperation provides a mock function with given fields: instanceID
func (_m *Operations) GetLastOperation(instanceID string) (*internal.Operation, error) {
	ret := _m.Called(instanceID)

	var r0 *internal.Operation
	if rf, ok := ret.Get(0).(func(string) *internal.Operation); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotFinishedOperationsByType provides a mock function with given fields: operationType
func (_m *Operations) GetNotFinishedOperationsByType(operationType internal.OperationType) ([]internal.Operation, error) {
	ret := _m.Called(operationType)

	var r0 []internal.Operation
	if rf, ok := ret.Get(0).(func(internal.OperationType) []internal.Operation); ok {
		r0 = rf(operationType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.OperationType) error); ok {
		r1 = rf(operationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationByID provides a mock function with given fields: operationID
func (_m *Operations) GetOperationByID(operationID string) (*internal.Operation, error) {
	ret := _m.Called(operationID)

	var r0 *internal.Operation
	if rf, ok := ret.Get(0).(func(string) *internal.Operation); ok {
		r0 = rf(operationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(operationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationStatsByPlan provides a mock function with given fields:
func (_m *Operations) GetOperationStatsByPlan() (map[string]internal.OperationStats, error) {
	ret := _m.Called()

	var r0 map[string]internal.OperationStats
	if rf, ok := ret.Get(0).(func() map[string]internal.OperationStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]internal.OperationStats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationStatsForOrchestration provides a mock function with given fields: orchestrationID
func (_m *Operations) GetOperationStatsForOrchestration(orchestrationID string) (map[string]int, error) {
	ret := _m.Called(orchestrationID)

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func(string) map[string]int); ok {
		r0 = rf(orchestrationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orchestrationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationsForIDs provides a mock function with given fields: operationIDList
func (_m *Operations) GetOperationsForIDs(operationIDList []string) ([]internal.Operation, error) {
	ret := _m.Called(operationIDList)

	var r0 []internal.Operation
	if rf, ok := ret.Get(0).(func([]string) []internal.Operation); ok {
		r0 = rf(operationIDList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(operationIDList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvisioningOperationByID provides a mock function with given fields: operationID
func (_m *Operations) GetProvisioningOperationByID(operationID string) (*internal.ProvisioningOperation, error) {
	ret := _m.Called(operationID)

	var r0 *internal.ProvisioningOperation
	if rf, ok := ret.Get(0).(func(string) *internal.ProvisioningOperation); ok {
		r0 = rf(operationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.ProvisioningOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(operationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvisioningOperationByInstanceID provides a mock function with given fields: instanceID
func (_m *Operations) GetProvisioningOperationByInstanceID(instanceID string) (*internal.ProvisioningOperation, error) {
	ret := _m.Called(instanceID)

	var r0 *internal.ProvisioningOperation
	if rf, ok := ret.Get(0).(func(string) *internal.ProvisioningOperation); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.ProvisioningOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpdatingOperationByID provides a mock function with given fields: operationID
func (_m *Operations) GetUpdatingOperationByID(operationID string) (*internal.UpdatingOperation, error) {
	ret := _m.Called(operationID)

	var r0 *internal.UpdatingOperation
	if rf, ok := ret.Get(0).(func(string) *internal.UpdatingOperation); ok {
		r0 = rf(operationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.UpdatingOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(operationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpgradeClusterOperationByID provides a mock function with given fields: operationID
func (_m *Operations) GetUpgradeClusterOperationByID(operationID string) (*internal.UpgradeClusterOperation, error) {
	ret := _m.Called(operationID)

	var r0 *internal.UpgradeClusterOperation
	if rf, ok := ret.Get(0).(func(string) *internal.UpgradeClusterOperation); ok {
		r0 = rf(operationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.UpgradeClusterOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(operationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpgradeKymaOperationByID provides a mock function with given fields: operationID
func (_m *Operations) GetUpgradeKymaOperationByID(operationID string) (*internal.UpgradeKymaOperation, error) {
	ret := _m.Called(operationID)

	var r0 *internal.UpgradeKymaOperation
	if rf, ok := ret.Get(0).(func(string) *internal.UpgradeKymaOperation); ok {
		r0 = rf(operationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.UpgradeKymaOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(operationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpgradeKymaOperationByInstanceID provides a mock function with given fields: instanceID
func (_m *Operations) GetUpgradeKymaOperationByInstanceID(instanceID string) (*internal.UpgradeKymaOperation, error) {
	ret := _m.Called(instanceID)

	var r0 *internal.UpgradeKymaOperation
	if rf, ok := ret.Get(0).(func(string) *internal.UpgradeKymaOperation); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.UpgradeKymaOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertDeprovisioningOperation provides a mock function with given fields: operation
func (_m *Operations) InsertDeprovisioningOperation(operation internal.DeprovisioningOperation) error {
	ret := _m.Called(operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.DeprovisioningOperation) error); ok {
		r0 = rf(operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertProvisioningOperation provides a mock function with given fields: operation
func (_m *Operations) InsertProvisioningOperation(operation internal.ProvisioningOperation) error {
	ret := _m.Called(operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.ProvisioningOperation) error); ok {
		r0 = rf(operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertUpdatingOperation provides a mock function with given fields: operation
func (_m *Operations) InsertUpdatingOperation(operation internal.UpdatingOperation) error {
	ret := _m.Called(operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.UpdatingOperation) error); ok {
		r0 = rf(operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertUpgradeClusterOperation provides a mock function with given fields: operation
func (_m *Operations) InsertUpgradeClusterOperation(operation internal.UpgradeClusterOperation) error {
	ret := _m.Called(operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.UpgradeClusterOperation) error); ok {
		r0 = rf(operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertUpgradeKymaOperation provides a mock function with given fields: operation
func (_m *Operations) InsertUpgradeKymaOperation(operation internal.UpgradeKymaOperation) error {
	ret := _m.Called(operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.UpgradeKymaOperation) error); ok {
		r0 = rf(operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDeprovisioningOperations provides a mock function with given fields:
func (_m *Operations) ListDeprovisioningOperations() ([]internal.DeprovisioningOperation, error) {
	ret := _m.Called()

	var r0 []internal.DeprovisioningOperation
	if rf, ok := ret.Get(0).(func() []internal.DeprovisioningOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.DeprovisioningOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeprovisioningOperationsByInstanceID provides a mock function with given fields: instanceID
func (_m *Operations) ListDeprovisioningOperationsByInstanceID(instanceID string) ([]internal.DeprovisioningOperation, error) {
	ret := _m.Called(instanceID)

	var r0 []internal.DeprovisioningOperation
	if rf, ok := ret.Get(0).(func(string) []internal.DeprovisioningOperation); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.DeprovisioningOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOperations provides a mock function with given fields: filter
func (_m *Operations) ListOperations(filter dbmodel.OperationFilter) ([]internal.Operation, int, int, error) {
	ret := _m.Called(filter)

	var r0 []internal.Operation
	if rf, ok := ret.Get(0).(func(dbmodel.OperationFilter) []internal.Operation); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Operation)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(dbmodel.OperationFilter) int); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(dbmodel.OperationFilter) int); ok {
		r2 = rf(filter)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(dbmodel.OperationFilter) error); ok {
		r3 = rf(filter)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ListProvisioningOperationsByInstanceID provides a mock function with given fields: instanceID
func (_m *Operations) ListProvisioningOperationsByInstanceID(instanceID string) ([]internal.ProvisioningOperation, error) {
	ret := _m.Called(instanceID)

	var r0 []internal.ProvisioningOperation
	if rf, ok := ret.Get(0).(func(string) []internal.ProvisioningOperation); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.ProvisioningOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUpdatingOperationsByInstanceID provides a mock function with given fields: instanceID
func (_m *Operations) ListUpdatingOperationsByInstanceID(instanceID string) ([]internal.UpdatingOperation, error) {
	ret := _m.Called(instanceID)

	var r0 []internal.UpdatingOperation
	if rf, ok := ret.Get(0).(func(string) []internal.UpdatingOperation); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.UpdatingOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUpgradeClusterOperationsByInstanceID provides a mock function with given fields: instanceID
func (_m *Operations) ListUpgradeClusterOperationsByInstanceID(instanceID string) ([]internal.UpgradeClusterOperation, error) {
	ret := _m.Called(instanceID)

	var r0 []internal.UpgradeClusterOperation
	if rf, ok := ret.Get(0).(func(string) []internal.UpgradeClusterOperation); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.UpgradeClusterOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUpgradeClusterOperationsByOrchestrationID provides a mock function with given fields: orchestrationID, filter
func (_m *Operations) ListUpgradeClusterOperationsByOrchestrationID(orchestrationID string, filter dbmodel.OperationFilter) ([]internal.UpgradeClusterOperation, int, int, error) {
	ret := _m.Called(orchestrationID, filter)

	var r0 []internal.UpgradeClusterOperation
	if rf, ok := ret.Get(0).(func(string, dbmodel.OperationFilter) []internal.UpgradeClusterOperation); ok {
		r0 = rf(orchestrationID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.UpgradeClusterOperation)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, dbmodel.OperationFilter) int); ok {
		r1 = rf(orchestrationID, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string, dbmodel.OperationFilter) int); ok {
		r2 = rf(orchestrationID, filter)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, dbmodel.OperationFilter) error); ok {
		r3 = rf(orchestrationID, filter)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ListUpgradeKymaOperations provides a mock function with given fields:
func (_m *Operations) ListUpgradeKymaOperations() ([]internal.UpgradeKymaOperation, error) {
	ret := _m.Called()

	var r0 []internal.UpgradeKymaOperation
	if rf, ok := ret.Get(0).(func() []internal.UpgradeKymaOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.UpgradeKymaOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUpgradeKymaOperationsByInstanceID provides a mock function with given fields: instanceID
func (_m *Operations) ListUpgradeKymaOperationsByInstanceID(instanceID string) ([]internal.UpgradeKymaOperation, error) {
	ret := _m.Called(instanceID)

	var r0 []internal.UpgradeKymaOperation
	if rf, ok := ret.Get(0).(func(string) []internal.UpgradeKymaOperation); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.UpgradeKymaOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUpgradeKymaOperationsByOrchestrationID provides a mock function with given fields: orchestrationID, filter
func (_m *Operations) ListUpgradeKymaOperationsByOrchestrationID(orchestrationID string, filter dbmodel.OperationFilter) ([]internal.UpgradeKymaOperation, int, int, error) {
	ret := _m.Called(orchestrationID, filter)

	var r0 []internal.UpgradeKymaOperation
	if rf, ok := ret.Get(0).(func(string, dbmodel.OperationFilter) []internal.UpgradeKymaOperation); ok {
		r0 = rf(orchestrationID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.UpgradeKymaOperation)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, dbmodel.OperationFilter) int); ok {
		r1 = rf(orchestrationID, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string, dbmodel.OperationFilter) int); ok {
		r2 = rf(orchestrationID, filter)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, dbmodel.OperationFilter) error); ok {
		r3 = rf(orchestrationID, filter)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UpdateDeprovisioningOperation provides a mock function with given fields: operation
func (_m *Operations) UpdateDeprovisioningOperation(operation internal.DeprovisioningOperation) (*internal.DeprovisioningOperation, error) {
	ret := _m.Called(operation)

	var r0 *internal.DeprovisioningOperation
	if rf, ok := ret.Get(0).(func(internal.DeprovisioningOperation) *internal.DeprovisioningOperation); ok {
		r0 = rf(operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.DeprovisioningOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.DeprovisioningOperation) error); ok {
		r1 = rf(operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvisioningOperation provides a mock function with given fields: operation
func (_m *Operations) UpdateProvisioningOperation(operation internal.ProvisioningOperation) (*internal.ProvisioningOperation, error) {
	ret := _m.Called(operation)

	var r0 *internal.ProvisioningOperation
	if rf, ok := ret.Get(0).(func(internal.ProvisioningOperation) *internal.ProvisioningOperation); ok {
		r0 = rf(operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.ProvisioningOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.ProvisioningOperation) error); ok {
		r1 = rf(operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUpdatingOperation provides a mock function with given fields: operation
func (_m *Operations) UpdateUpdatingOperation(operation internal.UpdatingOperation) (*internal.UpdatingOperation, error) {
	ret := _m.Called(operation)

	var r0 *internal.UpdatingOperation
	if rf, ok := ret.Get(0).(func(internal.UpdatingOperation) *internal.UpdatingOperation); ok {
		r0 = rf(operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.UpdatingOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.UpdatingOperation) error); ok {
		r1 = rf(operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUpgradeClusterOperation provides a mock function with given fields: operation
func (_m *Operations) UpdateUpgradeClusterOperation(operation internal.UpgradeClusterOperation) (*internal.UpgradeClusterOperation, error) {
	ret := _m.Called(operation)

	var r0 *internal.UpgradeClusterOperation
	if rf, ok := ret.Get(0).(func(internal.UpgradeClusterOperation) *internal.UpgradeClusterOperation); ok {
		r0 = rf(operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.UpgradeClusterOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.UpgradeClusterOperation) error); ok {
		r1 = rf(operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUpgradeKymaOperation provides a mock function with given fields: operation
func (_m *Operations) UpdateUpgradeKymaOperation(operation internal.UpgradeKymaOperation) (*internal.UpgradeKymaOperation, error) {
	ret := _m.Called(operation)

	var r0 *internal.UpgradeKymaOperation
	if rf, ok := ret.Get(0).(func(internal.UpgradeKymaOperation) *internal.UpgradeKymaOperation); ok {
		r0 = rf(operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.UpgradeKymaOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.UpgradeKymaOperation) error); ok {
		r1 = rf(operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
