// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	monitoring "github.com/kyma-project/control-plane/components/kyma-environment-broker/internal/monitoring"
	mock "github.com/stretchr/testify/mock"
	release "helm.sh/helm/v3/pkg/release"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// InstallRelease provides a mock function with given fields: params
func (_m *Client) InstallRelease(params monitoring.Parameters) (*release.Release, error) {
	ret := _m.Called(params)

	var r0 *release.Release
	if rf, ok := ret.Get(0).(func(monitoring.Parameters) *release.Release); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(monitoring.Parameters) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDeployed provides a mock function with given fields: releaseName
func (_m *Client) IsDeployed(releaseName string) (bool, error) {
	ret := _m.Called(releaseName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(releaseName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(releaseName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsPresent provides a mock function with given fields: releaseName
func (_m *Client) IsPresent(releaseName string) (bool, error) {
	ret := _m.Called(releaseName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(releaseName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(releaseName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UninstallRelease provides a mock function with given fields: releaseName
func (_m *Client) UninstallRelease(releaseName string) (*release.UninstallReleaseResponse, error) {
	ret := _m.Called(releaseName)

	var r0 *release.UninstallReleaseResponse
	if rf, ok := ret.Get(0).(func(string) *release.UninstallReleaseResponse); ok {
		r0 = rf(releaseName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.UninstallReleaseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(releaseName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeRelease provides a mock function with given fields: params
func (_m *Client) UpgradeRelease(params monitoring.Parameters) (*release.Release, error) {
	ret := _m.Called(params)

	var r0 *release.Release
	if rf, ok := ret.Get(0).(func(monitoring.Parameters) *release.Release); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(monitoring.Parameters) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
