// Code generated by mockery v2.3.0. DO NOT EDIT.

package automock

import (
	internal "github.com/kyma-project/control-plane/components/kyma-environment-broker/internal"
	gqlschema "github.com/kyma-project/control-plane/components/provisioner/pkg/gqlschema"

	mock "github.com/stretchr/testify/mock"
)

// InputAppender is an autogenerated mock type for the InputAppender type
type InputAppender struct {
	mock.Mock
}

// AppendGlobalOverrides provides a mock function with given fields: overrides
func (_m *InputAppender) AppendGlobalOverrides(overrides []*gqlschema.ConfigEntryInput) internal.ProvisionerInputCreator {
	ret := _m.Called(overrides)

	var r0 internal.ProvisionerInputCreator
	if rf, ok := ret.Get(0).(func([]*gqlschema.ConfigEntryInput) internal.ProvisionerInputCreator); ok {
		r0 = rf(overrides)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionerInputCreator)
		}
	}

	return r0
}

// AppendOverrides provides a mock function with given fields: component, overrides
func (_m *InputAppender) AppendOverrides(component string, overrides []*gqlschema.ConfigEntryInput) internal.ProvisionerInputCreator {
	ret := _m.Called(component, overrides)

	var r0 internal.ProvisionerInputCreator
	if rf, ok := ret.Get(0).(func(string, []*gqlschema.ConfigEntryInput) internal.ProvisionerInputCreator); ok {
		r0 = rf(component, overrides)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionerInputCreator)
		}
	}

	return r0
}
