// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	internal "github.com/kyma-project/control-plane/components/kyma-environment-broker/internal"
	mock "github.com/stretchr/testify/mock"
)

// BrokerClient is an autogenerated mock type for the BrokerClient type
type BrokerClient struct {
	mock.Mock
}

// Deprovision provides a mock function with given fields: instance
func (_m *BrokerClient) Deprovision(instance internal.Instance, force bool) (string, error) {
	ret := _m.Called(instance)

	var r0 string
	if rf, ok := ret.Get(0).(func(internal.Instance) string); ok {
		r0 = rf(instance)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.Instance) error); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBrokerClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewBrokerClient creates a new instance of BrokerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBrokerClient(t mockConstructorTestingTNewBrokerClient) *BrokerClient {
	mock := &BrokerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
