// Code generated by mockery v2.9.4. DO NOT EDIT.

package automock

import (
	gqlschema "github.com/kyma-project/control-plane/components/provisioner/pkg/gqlschema"

	internal "github.com/kyma-project/control-plane/components/kyma-environment-broker/internal"

	mock "github.com/stretchr/testify/mock"
)

// HyperscalerInputProvider is an autogenerated mock type for the HyperscalerInputProvider type
type HyperscalerInputProvider struct {
	mock.Mock
}

// ApplyParameters provides a mock function with given fields: _a0, params
func (_m *HyperscalerInputProvider) ApplyParameters(_a0 *gqlschema.ClusterConfigInput, params internal.ProvisioningParameters) {
	_m.Called(_a0, params)
}

// Defaults provides a mock function with given fields:
func (_m *HyperscalerInputProvider) Defaults() *gqlschema.ClusterConfigInput {
	ret := _m.Called()

	var r0 *gqlschema.ClusterConfigInput
	if rf, ok := ret.Get(0).(func() *gqlschema.ClusterConfigInput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.ClusterConfigInput)
		}
	}

	return r0
}

// Profile provides a mock function with given fields:
func (_m *HyperscalerInputProvider) Profile() gqlschema.KymaProfile {
	ret := _m.Called()

	var r0 gqlschema.KymaProfile
	if rf, ok := ret.Get(0).(func() gqlschema.KymaProfile); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(gqlschema.KymaProfile)
	}

	return r0
}

// Provider provides a mock function with given fields:
func (_m *HyperscalerInputProvider) Provider() internal.CloudProvider {
	ret := _m.Called()

	var r0 internal.CloudProvider
	if rf, ok := ret.Get(0).(func() internal.CloudProvider); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(internal.CloudProvider)
	}

	return r0
}
