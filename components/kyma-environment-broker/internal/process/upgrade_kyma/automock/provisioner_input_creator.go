// Code generated by mockery v1.1.2. DO NOT EDIT.

package automock

import (
	internal "github.com/kyma-project/control-plane/components/kyma-environment-broker/internal"
	gqlschema "github.com/kyma-project/control-plane/components/provisioner/pkg/gqlschema"

	mock "github.com/stretchr/testify/mock"
)

// ProvisionerInputCreator is an autogenerated mock type for the ProvisionerInputCreator type
type ProvisionerInputCreator struct {
	mock.Mock
}

// AppendGlobalOverrides provides a mock function with given fields: overrides
func (_m *ProvisionerInputCreator) AppendGlobalOverrides(overrides []*gqlschema.ConfigEntryInput) internal.ProvisionerInputCreator {
	ret := _m.Called(overrides)

	var r0 internal.ProvisionerInputCreator
	if rf, ok := ret.Get(0).(func([]*gqlschema.ConfigEntryInput) internal.ProvisionerInputCreator); ok {
		r0 = rf(overrides)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionerInputCreator)
		}
	}

	return r0
}

// AppendOverrides provides a mock function with given fields: component, overrides
func (_m *ProvisionerInputCreator) AppendOverrides(component string, overrides []*gqlschema.ConfigEntryInput) internal.ProvisionerInputCreator {
	ret := _m.Called(component, overrides)

	var r0 internal.ProvisionerInputCreator
	if rf, ok := ret.Get(0).(func(string, []*gqlschema.ConfigEntryInput) internal.ProvisionerInputCreator); ok {
		r0 = rf(component, overrides)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionerInputCreator)
		}
	}

	return r0
}

// CreateProvisionRuntimeInput provides a mock function with given fields:
func (_m *ProvisionerInputCreator) CreateProvisionRuntimeInput() (gqlschema.ProvisionRuntimeInput, error) {
	ret := _m.Called()

	var r0 gqlschema.ProvisionRuntimeInput
	if rf, ok := ret.Get(0).(func() gqlschema.ProvisionRuntimeInput); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(gqlschema.ProvisionRuntimeInput)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUpgradeRuntimeInput provides a mock function with given fields:
func (_m *ProvisionerInputCreator) CreateUpgradeRuntimeInput() (gqlschema.UpgradeRuntimeInput, error) {
	ret := _m.Called()

	var r0 gqlschema.UpgradeRuntimeInput
	if rf, ok := ret.Get(0).(func() gqlschema.UpgradeRuntimeInput); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(gqlschema.UpgradeRuntimeInput)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableOptionalComponent provides a mock function with given fields: componentName
func (_m *ProvisionerInputCreator) EnableOptionalComponent(componentName string) internal.ProvisionerInputCreator {
	ret := _m.Called(componentName)

	var r0 internal.ProvisionerInputCreator
	if rf, ok := ret.Get(0).(func(string) internal.ProvisionerInputCreator); ok {
		r0 = rf(componentName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionerInputCreator)
		}
	}

	return r0
}

// SetLabel provides a mock function with given fields: key, value
func (_m *ProvisionerInputCreator) SetLabel(key string, value string) internal.ProvisionerInputCreator {
	ret := _m.Called(key, value)

	var r0 internal.ProvisionerInputCreator
	if rf, ok := ret.Get(0).(func(string, string) internal.ProvisionerInputCreator); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionerInputCreator)
		}
	}

	return r0
}

// SetOverrides provides a mock function with given fields: component, overrides
func (_m *ProvisionerInputCreator) SetOverrides(component string, overrides []*gqlschema.ConfigEntryInput) internal.ProvisionerInputCreator {
	ret := _m.Called(component, overrides)

	var r0 internal.ProvisionerInputCreator
	if rf, ok := ret.Get(0).(func(string, []*gqlschema.ConfigEntryInput) internal.ProvisionerInputCreator); ok {
		r0 = rf(component, overrides)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionerInputCreator)
		}
	}

	return r0
}

// SetProvisioningParameters provides a mock function with given fields: params
func (_m *ProvisionerInputCreator) SetProvisioningParameters(params internal.ProvisioningParameters) internal.ProvisionerInputCreator {
	ret := _m.Called(params)

	var r0 internal.ProvisionerInputCreator
	if rf, ok := ret.Get(0).(func(internal.ProvisioningParameters) internal.ProvisionerInputCreator); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionerInputCreator)
		}
	}

	return r0
}

// SetShootName provides a mock function with given fields: _a0
func (_m *ProvisionerInputCreator) SetShootName(_a0 string) internal.ProvisionerInputCreator {
	ret := _m.Called(_a0)

	var r0 internal.ProvisionerInputCreator
	if rf, ok := ret.Get(0).(func(string) internal.ProvisionerInputCreator); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.ProvisionerInputCreator)
		}
	}

	return r0
}
