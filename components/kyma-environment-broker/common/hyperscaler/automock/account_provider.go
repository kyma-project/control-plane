// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import hyperscaler "github.com/kyma-project/control-plane/components/kyma-environment-broker/common/hyperscaler"
import mock "github.com/stretchr/testify/mock"

// AccountProvider is an autogenerated mock type for the AccountProvider type
type AccountProvider struct {
	mock.Mock
}

// GardenerSecretName provides a mock function with given fields: hyperscalerType, tenantName
func (_m *AccountProvider) GardenerSecretName(hyperscalerType hyperscaler.Type, tenantName string) (string, error) {
	ret := _m.Called(hyperscalerType, tenantName)

	var r0 string
	if rf, ok := ret.Get(0).(func(hyperscaler.Type, string) string); ok {
		r0 = rf(hyperscalerType, tenantName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hyperscaler.Type, string) error); ok {
		r1 = rf(hyperscalerType, tenantName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GardenerSharedSecretName provides a mock function with given fields: hyperscalerType
func (_m *AccountProvider) GardenerSharedSecretName(hyperscalerType hyperscaler.Type) (string, error) {
	ret := _m.Called(hyperscalerType)

	var r0 string
	if rf, ok := ret.Get(0).(func(hyperscaler.Type) string); ok {
		r0 = rf(hyperscalerType)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hyperscaler.Type) error); ok {
		r1 = rf(hyperscalerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkUnusedGardenerSecretBindingAsDirty provides a mock function with given fields: hyperscalerType, tenantName
func (_m *AccountProvider) MarkUnusedGardenerSecretBindingAsDirty(hyperscalerType hyperscaler.Type, tenantName string) error {
	ret := _m.Called(hyperscalerType, tenantName)

	var r0 error
	if rf, ok := ret.Get(0).(func(hyperscaler.Type, string) error); ok {
		r0 = rf(hyperscalerType, tenantName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
